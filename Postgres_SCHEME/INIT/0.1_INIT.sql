CREATE TABLE ROLES
(
    ID        SERIAL PRIMARY KEY,
    ROLE_NAME VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE PROJECTS
(
    ID          SERIAL PRIMARY KEY,
    NAME        VARCHAR(50) UNIQUE NOT NULL,
    DESCRIPTION TEXT               NOT NULL
);

CREATE TABLE USERS
(
    ID       SERIAL PRIMARY KEY,
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    PROJECT  INT                NOT NULL DEFAULT 1,
    EMAIL    VARCHAR(50) UNIQUE,
    ROLE     INT                NOT NULL DEFAULT 2,
    FOREIGN KEY (PROJECT) REFERENCES PROJECTS (ID),
    FOREIGN KEY (ROLE) REFERENCES ROLES (ID)
);

CREATE TABLE POSTS
(
    ID            SERIAL PRIMARY KEY,
    PROJECT       INT         NOT NULL,
    TITLE         TEXT UNIQUE NOT NULL,
    CONTENT       TEXT        NOT NULL,
    SHORT_CONTENT TEXT        NOT NULL,
    OWNER         INT         NOT NULL,
    TIMESTAMP     TIMESTAMP   NOT NULL,
    FOREIGN KEY (PROJECT) REFERENCES PROJECTS (ID),
    FOREIGN KEY (OWNER) REFERENCES USERS (ID)
);

CREATE TABLE COMMENTS
(
    ID        SERIAL PRIMARY KEY,
    COMMENT   TEXT      NOT NULL,
    OWNER     INT       NOT NULL,
    POST      INT       NOT NULL,
    TIMESTAMP TIMESTAMP NOT NULL,
    FOREIGN KEY (POST) REFERENCES POSTS (ID),
    FOREIGN KEY (OWNER) REFERENCES USERS (ID)
);

CREATE TABLE OAUTH_CREDENTIALS
(
    ID           SERIAL PRIMARY KEY,
    USER_ID      INT          NOT NULL UNIQUE,
    PROVIDER     VARCHAR(50)  NOT NULL,
    PROVIDER_ID  VARCHAR(100) NOT NULL,
    ACCESS_TOKEN TEXT         NOT NULL,
    EXPIRES_AT   TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID)
);

CREATE TABLE VOTES
(
    ID        SERIAL PRIMARY KEY,
    USER_ID   INT       NOT NULL,
    POST_ID   INT       NOT NULL,
    TIMESTAMP TIMESTAMP NOT NULL,
    VALUE     INT       NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
    FOREIGN KEY (POST_ID) REFERENCES POSTS (ID)
);


-- Indexes for performance optimization
CREATE INDEX IDX_USERS_ROLE ON USERS (ROLE);
CREATE INDEX IDX_POSTS_OWNER ON POSTS (OWNER);
CREATE INDEX IDX_COMMENTS_POST ON COMMENTS (POST);
CREATE INDEX IDX_COMMENTS_OWNER ON COMMENTS (OWNER);
CREATE INDEX IDX_VOTES_USER ON VOTES (USER_ID);
CREATE INDEX IDX_VOTES_POST ON VOTES (POST_ID);
-- Indexes on TIMESTAMP columns for efficient time-based queries
CREATE INDEX IDX_POSTS_TIMESTAMP ON POSTS (TIMESTAMP);
CREATE INDEX IDX_COMMENTS_TIMESTAMP ON COMMENTS (TIMESTAMP);
CREATE INDEX IDX_VOTES_TIMESTAMP ON VOTES (TIMESTAMP);



CREATE VIEW "POSTVIEW" AS
SELECT POSTS.ID,
       POSTS.TITLE,
       POSTS.CONTENT,
       POSTS.SHORT_CONTENT,
       POSTS.OWNER,
       POSTS.TIMESTAMP,
       USERS.USERNAME                        AS OWNER_USERNAME,
       COALESCE(VOTE_SUMMARY.TOTAL_VOTES, 0) AS TOTAL_VOTES,
       COALESCE(VOTE_SUMMARY.UPVOTES, 0)     AS UPVOTES,
       COALESCE(VOTE_SUMMARY.DOWNVOTES, 0)   AS DOWNVOTES
FROM POSTS
         JOIN
     USERS ON POSTS.OWNER = USERS.ID
         LEFT JOIN (SELECT POST_ID,
                           COUNT(*)                                   AS TOTAL_VOTES,
                           SUM(CASE WHEN VALUE > 0 THEN 1 ELSE 0 END) AS UPVOTES,
                           SUM(CASE WHEN VALUE < 0 THEN 1 ELSE 0 END) AS DOWNVOTES
                    FROM VOTES
                    GROUP BY POST_ID) AS VOTE_SUMMARY ON POSTS.ID = VOTE_SUMMARY.POST_ID;

CREATE VIEW COMMENTVIEW AS
SELECT COMMENTS.ID,
       COMMENTS.COMMENT,
       COMMENTS.OWNER,
       COMMENTS.POST,
       COMMENTS.TIMESTAMP,
       USERS.USERNAME AS OWNER_USERNAME
FROM COMMENTS
         JOIN USERS ON COMMENTS.OWNER = USERS.ID;

CREATE VIEW USERVIEW AS
SELECT USERS.ID,
       USERS.USERNAME,
       USERS.ROLE,
       ROLE.ROLE_NAME,
       OAUTH_CREDENTIALS.PROVIDER,
       OAUTH_CREDENTIALS.ACCESS_TOKEN,
       OAUTH_CREDENTIALS.EXPIRES_AT
FROM USERS
         JOIN ROLES AS ROLE ON USERS.ROLE = ROLE.ID
         LEFT JOIN OAUTH_CREDENTIALS ON USERS.ID = OAUTH_CREDENTIALS.USER_ID;


-- DATA INITIALIZATION


INSERT INTO ROLES (ROLE_NAME)
VALUES ('ADMIN');
INSERT INTO ROLES (ROLE_NAME)
VALUES ('GUEST');
INSERT INTO ROLES (ROLE_NAME)
VALUES ('USER');

INSERT INTO PROJECTS (NAME, DESCRIPTION)
VALUES ('Default', 'Default project');